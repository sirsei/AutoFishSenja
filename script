-- Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the main window
local Window = Rayfield:CreateWindow({
    Name = "SeiAUTOFISH V1",
    LoadingTitle = "Loading SeiAUTOFISH...",
    LoadingSubtitle = "by YourName",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "SeiAUTOFISH",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },
    KeySystem = false
})

-- Variables
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player.Backpack

-- Wait for tool "Darkritual"
local tool = character:FindFirstChild("Darkritual") or backpack:FindFirstChild("Darkritual")
if not tool then
    Rayfield:Notify({
        Title = "Error",
        Content = "Tool 'Darkritual' not found! Make sure you have this tool.",
        Duration = 5,
        Image = 4483362458,
        Actions = {
            Ignore = {
                Name = "Okay",
                Callback = function()
                    -- Do nothing
                end
            },
        },
    })
    return
end

local mechanics = tool:WaitForChild("Mechanics")
local remotes = mechanics:WaitForChild("Remotes")
local castEvent = remotes:WaitForChild("CastEvent")
local miniGameRemote = remotes:WaitForChild("MiniGame")
local requestFishAnnouncement = game:GetService("ReplicatedStorage"):WaitForChild("RequestFishAnnouncement")

-- Control variables
local isFishing = false
local announceEnabled = true
local antiAFKEnabled = true
local fishingLoop
local antiAFKConnection

-- Function to get latest fish
local function getLatestFish()
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and item.Name:find("kg") then
            return item
        end
    end
    return nil
end

-- Main auto fishing function
local function autoFish()
    if tool.Parent ~= character then
        tool.Parent = character
        wait(0.5)
    end
    castEvent:FireServer(false, 100)
    wait(2)
    wait(3)
    miniGameRemote:FireServer(true)
    wait(1)
    if announceEnabled then
        local fish = getLatestFish()
        if fish then
            requestFishAnnouncement:FireServer(fish)
        end
    end
end

-- Function to sell rarity
local function sellRarity(rarity)
    local args = { rarity }
    game:GetService("ReplicatedStorage"):WaitForChild("RequestSellRarity"):InvokeServer(unpack(args))
    Rayfield:Notify({
        Title = "Sold Fish",
        Content = "Successfully sold " .. rarity .. " fish.",
        Duration = 3,
        Image = 4483362458,
    })
end

-- Initialize Anti-AFK
task.spawn(function()
    local VU = game:GetService("VirtualUser")
    antiAFKConnection = player.Idled:Connect(function()
        if antiAFKEnabled then
            VU:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            VU:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            print("[ANTI-AFK] Simulated activity sent.")
        end
    end)
end)

-- Create Tabs
local FishingTab = Window:CreateTab("Fishing", 4483362458) -- Icon ID for fishing
local SellingTab = Window:CreateTab("Selling", 4483362458) -- Icon ID for selling

-- Fishing Tab Elements
FishingTab:CreateSection("Auto Fishing Controls")

local StartButton = FishingTab:CreateButton({
    Name = "Start Fishing",
    Callback = function()
        if not isFishing then
            isFishing = true
            Rayfield:Notify({
                Title = "Fishing Started",
                Content = "Auto fishing is now active.",
                Duration = 3,
                Image = 4483362458,
            })
            fishingLoop = task.spawn(function()
                while isFishing do
                    autoFish()
                    wait(0.5)
                end
            end)
        end
    end,
})

local StopButton = FishingTab:CreateButton({
    Name = "Stop Fishing",
    Callback = function()
        if isFishing then
            isFishing = false
            Rayfield:Notify({
                Title = "Fishing Stopped",
                Content = "Auto fishing has been stopped.",
                Duration = 3,
                Image = 4483362458,
            })
            if fishingLoop then
                task.cancel(fishingLoop)
            end
        end
    end,
})

FishingTab:CreateSection("Toggles")

local AnnouncementToggle = FishingTab:CreateToggle({
    Name = "Enable Announcement",
    CurrentValue = true,
    Flag = "AnnouncementToggle",
    Callback = function(Value)
        announceEnabled = Value
    end,
})

local AntiAFKToggle = FishingTab:CreateToggle({
    Name = "Enable Anti-AFK",
    CurrentValue = true,
    Flag = "AntiAFKToggle",
    Callback = function(Value)
        antiAFKEnabled = Value
        if antiAFKEnabled then
            local VU = game:GetService("VirtualUser")
            antiAFKConnection = player.Idled:Connect(function()
                VU:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                wait(1)
                VU:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                print("[ANTI-AFK] Simulated activity sent.")
            end)
        else
            if antiAFKConnection then
                antiAFKConnection:Disconnect()
                antiAFKConnection = nil
                print("[ANTI-AFK] Disabled by user.")
            end
        end
    end,
})

-- Selling Tab Elements
SellingTab:CreateSection("Sell Fish by Rarity")

local SellCommonButton = SellingTab:CreateButton({
    Name = "Sell Common (Gray)",
    Callback = function()
        sellRarity("Common")
    end,
})

local SellUnCommonButton = SellingTab:CreateButton({
    Name = "Sell UnCommon (Green)",
    Callback = function()
        sellRarity("UnCommon")
    end,
})

local SellRareButton = SellingTab:CreateButton({
    Name = "Sell Rare (White)",
    Callback = function()
        sellRarity("Rare")
    end,
})

local SellEpicButton = SellingTab:CreateButton({
    Name = "Sell Epic (Purple)",
    Callback = function()
        sellRarity("Epic")
    end,
})

local SellLegendaryButton = SellingTab:CreateButton({
    Name = "Sell Legendary (Orange)",
    Callback = function()
        sellRarity("Legendary")
    end,
})

local SellMythicalButton = SellingTab:CreateButton({
    Name = "Sell Mythical (Yellow)",
    Callback = function()
        sellRarity("Mythical")
    end,
})

local SellSecretButton = SellingTab:CreateButton({
    Name = "Sell Secret (Cyan)",
    Callback = function()
        sellRarity("Secret")
    end,
})

-- Final notification
Rayfield:Notify({
    Title = "Loaded Successfully",
    Content = "SeiAUTOFISH V1 with Rayfield UI is ready!",
    Duration = 5,
    Image = 4483362458,
})
